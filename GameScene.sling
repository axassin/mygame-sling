class is SpriteSceneWithEntities imports cape imports cave imports motion #gameScene:

var player as Player
var tree as Tree
var time as int
var gameBackground as GameBackground
var gameTimer as long
var fireButton as TextureSprite
var jumpButton as TextureSprite
var jumpIsClicked as boolean
var castFire as boolean
var fireBullet as Fire
var bird as Bird
var audioManager as AudioManager
var stream as AudioStream
var score as int
var textScore as TextSprite

func initialize override
{
	base.initialize()
	audioManager = AudioManager.forApplication(context)
	if(audioManager != null){
		stream = audioManager.getStreamForResource("background")
	}
	score = 0
	playBackgroundMusic()
	jumpIsClicked = false
	addEntity(gameBackground = new GameBackground())
	var txtProp = TextProperties.forText("Score")
	txtProp.setFontSizeRelative(20.0)
	textScore = addTextSprite(txtProp)
	textScore.move(0.0 , 0.0)
	var fireButtonTexture = createTextureForImageResource("fire_button")
  fireButton = addTextureSpriteForSize(fireButtonTexture, getReferenceWidth() * 0.1, getReferenceHeight() * 0.1)
	var jumpButtonTexture = createTextureForImageResource("up_button")
  jumpButton = addTextureSpriteForSize(jumpButtonTexture, getReferenceWidth() * 0.1, getReferenceHeight() * 0.1)
	fireButton.move(0 , getReferenceHeight() - fireButton.getHeight())
	jumpButton.move(getReferenceWidth() - jumpButton.getWidth() , getReferenceHeight() - jumpButton.getHeight())
	addEntity(bird = new Bird())
	addEntity(player = new Player())
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	textScore.setText(String.append("Score: ", score))
	time += 1
	if(time % 200 == 0){
		addEntity(tree = new Tree())
		addEntity(bird = new Bird())
	}
	if(castFire){
		addEntity(fireBullet = new Fire())
	}

	PRINT(String.append("TIME: " , gameTime.getMicroSeconds() / 1000000))
}

func playBackgroundMusic
{
	if(stream != null){
		stream.play()
		stream.setLooping(true)
	}
}

func onPointerEvent(event as PointerEvent) override
{
	base.onPointerEvent(event)
	if(event.isConsumed){
		return
	}
	if(event.action == PointerEvent.DOWN){
		if(event.isInside(fireButton.getX(),fireButton.getY(),fireButton.getWidth(),fireButton.getHeight())){
			castFire = true
		}
	}
	else if(event.action == PointerEvent.UP){
		if(event.isInside(fireButton.getX(),fireButton.getY(),fireButton.getWidth(),fireButton.getHeight())){
			castFire = false
		}
	}
}

func jumBut as TextureSprite
{
	return jumpButton
}


func getPlayer as Player
{
	return player
}

func getBird as Bird
{
	return bird
}

func getFire as Fire
{
	return fireBullet
}

func getTree as Tree
{
	return tree
}

//func collide(target1 as Sprite , target2 as Sprite) as bool
//{
//	var distanceX = Math.abs((target1.getX() + (target1.getWidth() * 0.5)) - (target2.getX() + (target2.getWidth() * 0.5)))
//	var distanceY = Math.abs((target1.getY() + (target1.getHeight() * 0.5)) - (target2.getY() + (target2.getHeight() * 0.5)))
//	var distanceCollideX = target1.getWidth() * 0.4 + target2.getWidth() * 0.4
//	var distanceCollideY = target1.getHeight() * 0.4 + target2.getHeight() * 0.4
//	return(distanceX < distanceCollideX && distanceY < distanceCollideY)
//}

func switchToGameOverScene
{
	stream.stop()
	pushScene(new GameOverScene())
}

func getScore as int
{
	return score
}

func addScore
{
	score += 1
}

func cleanup override
{
	removeAllSprites()
	removeAllEntities()
}
