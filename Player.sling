class is SpriteEntity is PointerListener imports cape imports cave imports motion #player:

var playerX as double
var playerY as double
var gravity as double
var jumpWidth as double
var playerBase as double
var jumpForce as double
var gameScene as GameScene
var playerJump as boolean
var jumpHeight as double
var playerFall as boolean
var oneTap as boolean
var sceneWidth as double
var sceneHeight as double

func createSprite override as Sprite
{
	gravity = 0.002
	jumpForce = 0.005
	playerJump = false
	playerFall = false
	oneTap = true
  sceneWidth = layer.getReferenceWidth()
	sceneHeight = layer.getReferenceHeight()
	var img = scene.createImageFromResource("player")
	var texture = scene.createTextureForImage(img)
	var player = SpriteUtil.addTextureSpriteForSize(scene, layer, texture, sceneWidth * 0.1, sceneHeight * 0.1)
	playerBase = sceneHeight * 0.78 - player.getHeight()
	player.move(sceneWidth * 0.5, playerBase)
	playerX = player.getX()
	playerY = player.getY()
	jumpHeight = sceneHeight * 0.4

	return player
}

func onPointerEvent(event as PointerEvent) as bool
{
	if(event.action == PointerEvent.UP){
		if(oneTap){
			playerY -= 0.001
			playerJump = true
		}

	}
	return false
}

func jump(delta as double)
{
	if(playerY >  jumpHeight && playerY < playerBase){
		playerY -= jumpForce * 1.5 + gravity
		playerFall = false
		oneTap = false
	}
	else{
		playerFall = true
		playerJump = false
	}
}

func fall(delta as double)
{
	if(playerY < playerBase){
		playerY += jumpForce + gravity
	}
	else{
		playerY = sceneHeight * 0.78 - sprite.getHeight()
		oneTap = true
	}
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	if(playerY >= playerBase){
		playerJump = false
	}
	if(playerJump){
		jump(delta)
	}
	if(playerFall){
		fall(delta)
	}
	sprite.move(playerX , playerY)
}

func getCenterX as double
{
	return sprite.getX() + (sprite.getWidth() * 0.5)
}

func getCenterY as double
{
	return sprite.getY() + (sprite.getHeight() * 0.5)
}

func cleanup override
{

}
